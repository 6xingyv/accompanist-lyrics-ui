<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/sample/src/androidMain/kotlin/com/mocharealm/accompanist/sample/ui/screen/player/PlayerScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/sample/src/androidMain/kotlin/com/mocharealm/accompanist/sample/ui/screen/player/PlayerScreen.kt" />
              <option name="originalContent" value="package com.mocharealm.accompanist.sample.ui.screen.player&#10;&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.captionBarPadding&#10;import androidx.compose.foundation.layout.fillMaxHeight&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyListState&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberUpdatedState&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.BlendMode&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.CompositingStrategy&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.em&#10;import androidx.compose.ui.unit.sp&#10;import com.mocharealm.accompanist.lyrics.core.model.karaoke.KaraokeLine&#10;import com.mocharealm.accompanist.lyrics.ui.composable.lyrics.KaraokeLyricsView&#10;import com.mocharealm.accompanist.lyrics.ui.theme.SFPro&#10;import com.mocharealm.accompanist.sample.domain.model.MusicItem&#10;import com.mocharealm.accompanist.sample.ui.adaptive.WindowLayoutType&#10;import com.mocharealm.accompanist.sample.ui.composable.ModalScaffold&#10;import com.mocharealm.accompanist.sample.ui.composable.background.BackgroundVisualState&#10;import com.mocharealm.accompanist.sample.ui.composable.background.FlowingLightBackground&#10;import com.mocharealm.accompanist.sample.ui.screen.share.ShareContext&#10;import com.mocharealm.accompanist.sample.ui.screen.share.ShareScreen&#10;import com.mocharealm.accompanist.sample.ui.screen.share.ShareViewModel&#10;import kotlinx.coroutines.android.awaitFrame&#10;import org.koin.compose.viewmodel.koinViewModel&#10;&#10;&#10;@Composable&#10;fun PlayerScreen(&#10;    playerViewModel: PlayerViewModel = koinViewModel(),&#10;    shareViewModel: ShareViewModel = koinViewModel(),&#10;) {&#10;    val listState = rememberLazyListState()&#10;    val uiState by playerViewModel.uiState.collectAsState()&#10;    val latestPlaybackState by rememberUpdatedState(uiState.playbackState)&#10;&#10;    val animatedPosition = remember { Animatable(latestPlaybackState.position.toFloat()) }&#10;    LaunchedEffect(latestPlaybackState.position, latestPlaybackState.isPlaying) {&#10;        if (latestPlaybackState.isPlaying) {&#10;            while (true) {&#10;                val elapsed = System.currentTimeMillis() - latestPlaybackState.lastUpdateTime&#10;                val target = (latestPlaybackState.position + elapsed).coerceAtMost(latestPlaybackState.duration)&#10;                if (target &gt; animatedPosition.value) {&#10;                    animatedPosition.snapTo(target.toFloat())&#10;                }&#10;                awaitFrame()&#10;            }&#10;        } else {&#10;            animatedPosition.snapTo(latestPlaybackState.position.toFloat())&#10;        }&#10;    }&#10;&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        ModalScaffold(&#10;            isModalOpen = uiState.isShareSheetVisible,&#10;            modifier = Modifier.fillMaxSize(),&#10;            onDismissRequest = {&#10;                playerViewModel.onShareDismissed()&#10;                shareViewModel.reset()&#10;            },&#10;            modalContent = {&#10;                ShareScreen(it, shareViewModel = shareViewModel)&#10;            }&#10;        ) {&#10;            uiState.backgroundState.bitmap?.let { bitmap -&gt;&#10;                FlowingLightBackground(&#10;                    state = BackgroundVisualState(&#10;                        bitmap, uiState.backgroundState.isBright&#10;                    ),&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;&#10;            when (WindowLayoutType.current) {&#10;                WindowLayoutType.Phone -&gt; {&#10;                    MobilePlayerScreen(&#10;                        listState,&#10;                        animatedPosition.value.toLong(),&#10;                        playerViewModel,&#10;                        shareViewModel,&#10;                        uiState&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    PadPlayerScreen(&#10;                        listState,&#10;                        animatedPosition.value.toLong(),&#10;                        playerViewModel,&#10;                        shareViewModel,&#10;                        uiState&#10;                    )&#10;                }&#10;            }&#10;&#10;            if (uiState.showSelectionDialog) {&#10;                MusicItemSelectionDialog(&#10;                    items = uiState.availableSongs,&#10;                    onItemSelected = { item -&gt;&#10;                        playerViewModel.onSongSelected(item)&#10;                    },&#10;                    onDismissRequest = { /* Optionally handle dismiss */ }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MobilePlayerScreen(&#10;    listState: LazyListState,&#10;    animatedPosition: Long,&#10;    playerViewModel: PlayerViewModel,&#10;    shareViewModel: ShareViewModel,&#10;    uiState: PlayerUiState&#10;) {&#10;    Column {&#10;        Row(&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier&#10;                .captionBarPadding()&#10;                .statusBarsPadding()&#10;                .padding(horizontal = 28.dp)&#10;                .padding(top = 28.dp)&#10;                .fillMaxWidth()&#10;        ) {&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                uiState.backgroundState.bitmap?.let { bitmap -&gt;&#10;                    Image(&#10;                        bitmap,&#10;                        null,&#10;                        Modifier&#10;                            .clip(RoundedCornerShape(6.dp))&#10;                            .border(&#10;                                1.dp,&#10;                                Color.White.copy(0.2f),&#10;                                RoundedCornerShape(6.dp)&#10;                            )&#10;                            .size(60.dp)&#10;                    )&#10;                }&#10;                Column(&#10;                    Modifier&#10;                        .graphicsLayer {&#10;                            blendMode = BlendMode.Plus&#10;                        }) {&#10;                    Text(&#10;                        uiState.currentMusicItem?.label ?: &quot;Unknown Title&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        uiState.currentMusicItem?.testTarget?.split(&quot; [&quot;)[0] ?: &quot;Unknown&quot;,&#10;                        Modifier.alpha(0.6f),&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;            Row(&#10;                Modifier&#10;                    .graphicsLayer {&#10;                        blendMode = BlendMode.Plus&#10;                    }, horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Box(&#10;                    Modifier&#10;                        .clip(CircleShape)&#10;                        .background(Color.White.copy(0.2f))&#10;                        .clickable { playerViewModel.onOpenSongSelection() }&#10;                        .padding(4.dp)&#10;                        .size(20.dp)&#10;                )&#10;            }&#10;        }&#10;        uiState.lyrics?.let { finalLyrics -&gt;&#10;            KaraokeLyricsView(&#10;                listState = listState,&#10;                lyrics = finalLyrics,&#10;                currentPosition = animatedPosition,&#10;                onLineClicked = { line -&gt;&#10;                    playerViewModel.seekTo(line.start.toLong())&#10;                },&#10;                onLinePressed = { line -&gt;&#10;                    playerViewModel.onShareRequested()&#10;                    val context = ShareContext(&#10;                        lyrics = finalLyrics,&#10;                        initialLine = line as KaraokeLine,&#10;                        backgroundState = BackgroundVisualState(&#10;                            bitmap = uiState.backgroundState.bitmap,&#10;                            isBright = uiState.backgroundState.isBright&#10;                        )&#10;                    )&#10;                    shareViewModel.prepareForSharing(context)&#10;                    playerViewModel.onShareRequested()&#10;                },&#10;                modifier = Modifier&#10;                    .padding(horizontal = 12.dp)&#10;                    .graphicsLayer {&#10;                        blendMode = BlendMode.Plus&#10;                        compositingStrategy = CompositingStrategy.Offscreen&#10;                    },&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PadPlayerScreen(&#10;    listState: LazyListState,&#10;    animatedPosition: Long,&#10;    playerViewModel: PlayerViewModel,&#10;    shareViewModel: ShareViewModel,&#10;    uiState: PlayerUiState&#10;) {&#10;    Row(&#10;        Modifier&#10;            .captionBarPadding()&#10;            .statusBarsPadding()&#10;            .animateContentSize(),&#10;        horizontalArrangement = Arrangement.Center,&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.4f)&#10;                .fillMaxHeight()&#10;                .padding(start = 100.dp)&#10;                .padding(top = 28.dp)&#10;        ) {&#10;            if (uiState.backgroundState.bitmap != null) {&#10;                Image(&#10;                    uiState.backgroundState.bitmap,&#10;                    null,&#10;                    Modifier&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .border(&#10;                            1.dp,&#10;                            Color.White.copy(0.2f),&#10;                            RoundedCornerShape(6.dp)&#10;                        )&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                )&#10;            } else {&#10;                Box(&#10;                    Modifier&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .border(&#10;                            1.dp,&#10;                            Color.White.copy(0.2f),&#10;                            RoundedCornerShape(6.dp)&#10;                        )&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                        .background(Color.White.copy(0.1f))&#10;                )&#10;            }&#10;            Spacer(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(28.dp)&#10;            )&#10;            Row(&#10;                Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(&#10;                    Modifier&#10;                        .graphicsLayer {&#10;                            blendMode = BlendMode.Plus&#10;                        }) {&#10;                    Text(&#10;                        uiState.currentMusicItem?.label ?: &quot;Unknown Title&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        uiState.currentMusicItem?.testTarget?.split(&quot; [&quot;)[0] ?: &quot;Unknown&quot;,&#10;                        Modifier.alpha(0.6f),&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;                Row(&#10;                    Modifier&#10;                        .graphicsLayer {&#10;                            blendMode = BlendMode.Plus&#10;                        }, horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Box(&#10;                        Modifier&#10;                            .clip(CircleShape)&#10;                            .background(Color.White.copy(0.2f))&#10;                            .clickable { playerViewModel.onOpenSongSelection() }&#10;                            .padding(4.dp)&#10;                            .size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;        }&#10;        uiState.lyrics?.let { finalLyrics -&gt;&#10;            KaraokeLyricsView(&#10;                listState = listState,&#10;                lyrics = finalLyrics,&#10;                currentPosition = animatedPosition,&#10;                onLineClicked = { line -&gt;&#10;                    playerViewModel.seekTo(line.start.toLong())&#10;                },&#10;                onLinePressed = { line -&gt;&#10;                    playerViewModel.onShareRequested()&#10;                    val context = ShareContext(&#10;                        lyrics = finalLyrics,&#10;                        initialLine = line as KaraokeLine,&#10;                        backgroundState = BackgroundVisualState(&#10;                            bitmap = uiState.backgroundState.bitmap,&#10;                            isBright = uiState.backgroundState.isBright&#10;                        )&#10;                    )&#10;                    shareViewModel.prepareForSharing(context)&#10;                    playerViewModel.onShareRequested()&#10;                },&#10;                modifier = Modifier&#10;                    .padding(horizontal = 12.dp)&#10;                    .padding(start = 60.dp, end = 60.dp)&#10;                    .weight(1f)&#10;                    .graphicsLayer {&#10;                        blendMode = BlendMode.Plus&#10;                        compositingStrategy = CompositingStrategy.Offscreen&#10;                    },&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MusicItemSelectionDialog(&#10;    items: List&lt;MusicItem&gt;,&#10;    onItemSelected: (MusicItem) -&gt; Unit,&#10;    onDismissRequest: () -&gt; Unit&#10;) {&#10;    var selectedIndex by remember { mutableIntStateOf(-1) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismissRequest,&#10;        title = { Text(&quot;Choose a song to play&quot;) },&#10;        text = {&#10;            LazyColumn {&#10;                itemsIndexed(items) { index, item -&gt;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { selectedIndex = index }&#10;                            .padding(vertical = 12.dp)) {&#10;                        Text(item.label, fontWeight = FontWeight.Bold)&#10;                        Text(item.testTarget, fontSize = 14.sp)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Text(&quot;Confirm&quot;, Modifier.clickable {&#10;                if (selectedIndex != -1) {&#10;                    onItemSelected(items[selectedIndex])&#10;                }&#10;            })&#10;        })&#10;}" />
              <option name="updatedContent" value="package com.mocharealm.accompanist.sample.ui.screen.player&#10;&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.Animatable&#10;import androidx.compose.foundation.Image&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.border&#10;import androidx.compose.foundation.clickable&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.aspectRatio&#10;import androidx.compose.foundation.layout.captionBarPadding&#10;import androidx.compose.foundation.layout.fillMaxHeight&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.statusBarsPadding&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.LazyListState&#10;import androidx.compose.foundation.lazy.itemsIndexed&#10;import androidx.compose.foundation.lazy.rememberLazyListState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material3.AlertDialog&#10;import androidx.compose.material3.Text&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.runtime.LaunchedEffect&#10;import androidx.compose.runtime.collectAsState&#10;import androidx.compose.runtime.getValue&#10;import androidx.compose.runtime.mutableIntStateOf&#10;import androidx.compose.runtime.remember&#10;import androidx.compose.runtime.rememberUpdatedState&#10;import androidx.compose.runtime.setValue&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.alpha&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.BlendMode&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.graphics.CompositingStrategy&#10;import androidx.compose.ui.graphics.graphicsLayer&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.em&#10;import androidx.compose.ui.unit.sp&#10;import com.mocharealm.accompanist.lyrics.core.model.karaoke.KaraokeLine&#10;import com.mocharealm.accompanist.lyrics.ui.composable.lyrics.KaraokeLyricsView&#10;import com.mocharealm.accompanist.lyrics.ui.theme.SFPro&#10;import com.mocharealm.accompanist.sample.domain.model.MusicItem&#10;import com.mocharealm.accompanist.sample.ui.adaptive.WindowLayoutType&#10;import com.mocharealm.accompanist.sample.ui.composable.ModalScaffold&#10;import com.mocharealm.accompanist.sample.ui.composable.background.BackgroundVisualState&#10;import com.mocharealm.accompanist.sample.ui.composable.background.FlowingLightBackground&#10;import com.mocharealm.accompanist.sample.ui.screen.share.ShareContext&#10;import com.mocharealm.accompanist.sample.ui.screen.share.ShareScreen&#10;import com.mocharealm.accompanist.sample.ui.screen.share.ShareViewModel&#10;import kotlinx.coroutines.android.awaitFrame&#10;import org.koin.compose.viewmodel.koinViewModel&#10;&#10;&#10;@Composable&#10;fun PlayerScreen(&#10;    playerViewModel: PlayerViewModel = koinViewModel(),&#10;    shareViewModel: ShareViewModel = koinViewModel(),&#10;) {&#10;    val listState = rememberLazyListState()&#10;    val uiState by playerViewModel.uiState.collectAsState()&#10;    val latestPlaybackState by rememberUpdatedState(uiState.playbackState)&#10;&#10;    val animatedPosition = remember { Animatable(latestPlaybackState.position.toFloat()) }&#10;    LaunchedEffect(latestPlaybackState.position, latestPlaybackState.isPlaying) {&#10;        if (latestPlaybackState.isPlaying) {&#10;            while (true) {&#10;                val elapsed = System.currentTimeMillis() - latestPlaybackState.lastUpdateTime&#10;                val target = (latestPlaybackState.position + elapsed).coerceAtMost(latestPlaybackState.duration)&#10;                if (target &gt; animatedPosition.value) {&#10;                    animatedPosition.snapTo(target.toFloat())&#10;                }&#10;                awaitFrame()&#10;            }&#10;        } else {&#10;            animatedPosition.snapTo(latestPlaybackState.position.toFloat())&#10;        }&#10;    }&#10;&#10;    val animatedPositionProvider = { animatedPosition.value.toLong() }&#10;&#10;    Box(modifier = Modifier.fillMaxSize()) {&#10;        ModalScaffold(&#10;            isModalOpen = uiState.isShareSheetVisible,&#10;            modifier = Modifier.fillMaxSize(),&#10;            onDismissRequest = {&#10;                playerViewModel.onShareDismissed()&#10;                shareViewModel.reset()&#10;            },&#10;            modalContent = {&#10;                ShareScreen(it, shareViewModel = shareViewModel)&#10;            }&#10;        ) {&#10;            uiState.backgroundState.bitmap?.let { bitmap -&gt;&#10;                FlowingLightBackground(&#10;                    state = BackgroundVisualState(&#10;                        bitmap, uiState.backgroundState.isBright&#10;                    ),&#10;                    modifier = Modifier.fillMaxSize()&#10;                )&#10;            }&#10;&#10;            when (WindowLayoutType.current) {&#10;                WindowLayoutType.Phone -&gt; {&#10;                    MobilePlayerScreen(&#10;                        listState,&#10;                        animatedPositionProvider,&#10;                        playerViewModel,&#10;                        shareViewModel,&#10;                        uiState&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    PadPlayerScreen(&#10;                        listState,&#10;                        animatedPositionProvider,&#10;                        playerViewModel,&#10;                        shareViewModel,&#10;                        uiState&#10;                    )&#10;                }&#10;            }&#10;&#10;            if (uiState.showSelectionDialog) {&#10;                MusicItemSelectionDialog(&#10;                    items = uiState.availableSongs,&#10;                    onItemSelected = { item -&gt;&#10;                        playerViewModel.onSongSelected(item)&#10;                    },&#10;                    onDismissRequest = { /* Optionally handle dismiss */ }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MobilePlayerScreen(&#10;    listState: LazyListState,&#10;    animatedPositionProvider: () -&gt; Long,&#10;    playerViewModel: PlayerViewModel,&#10;    shareViewModel: ShareViewModel,&#10;    uiState: PlayerUiState&#10;) {&#10;    Column {&#10;        Row(&#10;            horizontalArrangement = Arrangement.SpaceBetween,&#10;            verticalAlignment = Alignment.CenterVertically,&#10;            modifier = Modifier&#10;                .captionBarPadding()&#10;                .statusBarsPadding()&#10;                .padding(horizontal = 28.dp)&#10;                .padding(top = 28.dp)&#10;                .fillMaxWidth()&#10;        ) {&#10;            Row(&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp),&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                uiState.backgroundState.bitmap?.let { bitmap -&gt;&#10;                    Image(&#10;                        bitmap,&#10;                        null,&#10;                        Modifier&#10;                            .clip(RoundedCornerShape(6.dp))&#10;                            .border(&#10;                                1.dp,&#10;                                Color.White.copy(0.2f),&#10;                                RoundedCornerShape(6.dp)&#10;                            )&#10;                            .size(60.dp)&#10;                    )&#10;                }&#10;                Column(&#10;                    Modifier&#10;                        .graphicsLayer {&#10;                            blendMode = BlendMode.Plus&#10;                        }) {&#10;                    Text(&#10;                        uiState.currentMusicItem?.label ?: &quot;Unknown Title&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        uiState.currentMusicItem?.testTarget?.split(&quot; [&quot;)[0] ?: &quot;Unknown&quot;,&#10;                        Modifier.alpha(0.6f),&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;            }&#10;            Row(&#10;                Modifier&#10;                    .graphicsLayer {&#10;                        blendMode = BlendMode.Plus&#10;                    }, horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;            ) {&#10;                Box(&#10;                    Modifier&#10;                        .clip(CircleShape)&#10;                        .background(Color.White.copy(0.2f))&#10;                        .clickable { playerViewModel.onOpenSongSelection() }&#10;                        .padding(4.dp)&#10;                        .size(20.dp)&#10;                )&#10;            }&#10;        }&#10;        uiState.lyrics?.let { finalLyrics -&gt;&#10;            KaraokeLyricsView(&#10;                listState = listState,&#10;                lyrics = finalLyrics,&#10;                currentPosition = animatedPositionProvider(),&#10;                onLineClicked = { line -&gt;&#10;                    playerViewModel.seekTo(line.start.toLong())&#10;                },&#10;                onLinePressed = { line -&gt;&#10;                    playerViewModel.onShareRequested()&#10;                    val context = ShareContext(&#10;                        lyrics = finalLyrics,&#10;                        initialLine = line as KaraokeLine,&#10;                        backgroundState = BackgroundVisualState(&#10;                            bitmap = uiState.backgroundState.bitmap,&#10;                            isBright = uiState.backgroundState.isBright&#10;                        )&#10;                    )&#10;                    shareViewModel.prepareForSharing(context)&#10;                    playerViewModel.onShareRequested()&#10;                },&#10;                modifier = Modifier&#10;                    .padding(horizontal = 12.dp)&#10;                    .graphicsLayer {&#10;                        blendMode = BlendMode.Plus&#10;                        compositingStrategy = CompositingStrategy.Offscreen&#10;                    },&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun PadPlayerScreen(&#10;    listState: LazyListState,&#10;    animatedPositionProvider: () -&gt; Long,&#10;    playerViewModel: PlayerViewModel,&#10;    shareViewModel: ShareViewModel,&#10;    uiState: PlayerUiState&#10;) {&#10;    Row(&#10;        Modifier&#10;            .captionBarPadding()&#10;            .statusBarsPadding()&#10;            .animateContentSize(),&#10;        horizontalArrangement = Arrangement.Center,&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.Center,&#10;            modifier = Modifier&#10;                .fillMaxWidth(0.4f)&#10;                .fillMaxHeight()&#10;                .padding(start = 100.dp)&#10;                .padding(top = 28.dp)&#10;        ) {&#10;            if (uiState.backgroundState.bitmap != null) {&#10;                Image(&#10;                    uiState.backgroundState.bitmap,&#10;                    null,&#10;                    Modifier&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .border(&#10;                            1.dp,&#10;                            Color.White.copy(0.2f),&#10;                            RoundedCornerShape(6.dp)&#10;                        )&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                )&#10;            } else {&#10;                Box(&#10;                    Modifier&#10;                        .clip(RoundedCornerShape(6.dp))&#10;                        .border(&#10;                            1.dp,&#10;                            Color.White.copy(0.2f),&#10;                            RoundedCornerShape(6.dp)&#10;                        )&#10;                        .fillMaxWidth()&#10;                        .aspectRatio(1f)&#10;                        .background(Color.White.copy(0.1f))&#10;                )&#10;            }&#10;            Spacer(&#10;                Modifier&#10;                    .fillMaxWidth()&#10;                    .height(28.dp)&#10;            )&#10;            Row(&#10;                Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.SpaceBetween,&#10;                verticalAlignment = Alignment.CenterVertically&#10;            ) {&#10;                Column(&#10;                    Modifier&#10;                        .graphicsLayer {&#10;                            blendMode = BlendMode.Plus&#10;                        }) {&#10;                    Text(&#10;                        uiState.currentMusicItem?.label ?: &quot;Unknown Title&quot;,&#10;                        fontWeight = FontWeight.Bold,&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                    Text(&#10;                        uiState.currentMusicItem?.testTarget?.split(&quot; [&quot;)[0] ?: &quot;Unknown&quot;,&#10;                        Modifier.alpha(0.6f),&#10;                        fontFamily = SFPro(),&#10;                        lineHeight = 1.em,&#10;                        color = Color.White&#10;                    )&#10;                }&#10;                Row(&#10;                    Modifier&#10;                        .graphicsLayer {&#10;                            blendMode = BlendMode.Plus&#10;                        }, horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                ) {&#10;                    Box(&#10;                        Modifier&#10;                            .clip(CircleShape)&#10;                            .background(Color.White.copy(0.2f))&#10;                            .clickable { playerViewModel.onOpenSongSelection() }&#10;                            .padding(4.dp)&#10;                            .size(20.dp)&#10;                    )&#10;                }&#10;            }&#10;&#10;        }&#10;        uiState.lyrics?.let { finalLyrics -&gt;&#10;            KaraokeLyricsView(&#10;                listState = listState,&#10;                lyrics = finalLyrics,&#10;                currentPosition = animatedPositionProvider(),&#10;                onLineClicked = { line -&gt;&#10;                    playerViewModel.seekTo(line.start.toLong())&#10;                },&#10;                onLinePressed = { line -&gt;&#10;                    playerViewModel.onShareRequested()&#10;                    val context = ShareContext(&#10;                        lyrics = finalLyrics,&#10;                        initialLine = line as KaraokeLine,&#10;                        backgroundState = BackgroundVisualState(&#10;                            bitmap = uiState.backgroundState.bitmap,&#10;                            isBright = uiState.backgroundState.isBright&#10;                        )&#10;                    )&#10;                    shareViewModel.prepareForSharing(context)&#10;                    playerViewModel.onShareRequested()&#10;                },&#10;                modifier = Modifier&#10;                    .padding(horizontal = 12.dp)&#10;                    .padding(start = 60.dp, end = 60.dp)&#10;                    .weight(1f)&#10;                    .graphicsLayer {&#10;                        blendMode = BlendMode.Plus&#10;                        compositingStrategy = CompositingStrategy.Offscreen&#10;                    },&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun MusicItemSelectionDialog(&#10;    items: List&lt;MusicItem&gt;,&#10;    onItemSelected: (MusicItem) -&gt; Unit,&#10;    onDismissRequest: () -&gt; Unit&#10;) {&#10;    var selectedIndex by remember { mutableIntStateOf(-1) }&#10;    AlertDialog(&#10;        onDismissRequest = onDismissRequest,&#10;        title = { Text(&quot;Choose a song to play&quot;) },&#10;        text = {&#10;            LazyColumn {&#10;                itemsIndexed(items) { index, item -&gt;&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .clickable { selectedIndex = index }&#10;                            .padding(vertical = 12.dp)) {&#10;                        Text(item.label, fontWeight = FontWeight.Bold)&#10;                        Text(item.testTarget, fontSize = 14.sp)&#10;                    }&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            Text(&quot;Confirm&quot;, Modifier.clickable {&#10;                if (selectedIndex != -1) {&#10;                    onItemSelected(items[selectedIndex])&#10;                }&#10;            })&#10;        })&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/your_file.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/your_file.kt" />
              <option name="updatedContent" value="// ...existing code...&#10;    val firstSyllableStart = lineLayout.first().syllable.start&#10;    val lastSyllableEnd = lineLayout.last().syllable.end&#10;// ...existing code...&#10;    val fadeInEndTime = firstSyllableStart + fadeInDuration&#10;    val fadeOutStartTime = lastSyllableEnd - fadeOutDuration&#10;&#10;    val lineProgress = run {&#10;        val activeSyllable = lineLayout.find {&#10;            currentTimeMs in it.syllable.start until it.syllable.end&#10;        }&#10;&#10;        val currentPixelPosition = when {&#10;            activeSyllable != null -&gt; {&#10;                // 在当前音节内，根据音节进度计算像素位置&#10;                val syllableProgress = activeSyllable.syllable.progress(currentTimeMs)&#10;                activeSyllable.position.x + activeSyllable.size.width * syllableProgress&#10;            }&#10;&#10;            currentTimeMs &gt;= lastSyllableEnd -&gt; totalWidth // 整行结束&#10;&#10;            currentTimeMs &lt; firstSyllableStart -&gt; 0f // 整行未开始&#10;&#10;            else -&gt; {&#10;                // 在音节之间，实现平滑过渡&#10;                val lastFinishedIndex = lineLayout.indexOfLast { currentTimeMs &gt;= it.syllable.end }&#10;                val lastFinished = lineLayout.getOrNull(lastFinishedIndex)&#10;                val nextSyllable = lineLayout.getOrNull(lastFinishedIndex + 1)&#10;&#10;                if (lastFinished != null &amp;&amp; nextSyllable != null) {&#10;                    val gapStartTime = lastFinished.syllable.end&#10;                    val gapEndTime = nextSyllable.syllable.start&#10;                    val gapDuration = gapEndTime - gapStartTime&#10;&#10;                    val startPixel = lastFinished.position.x + lastFinished.size.width&#10;                    val endPixel = nextSyllable.position.x&#10;&#10;                    if (gapDuration &gt; 0) {&#10;                        val gapProgress = (currentTimeMs - gapStartTime).toFloat() / gapDuration&#10;                        // 在上一个音节末尾和下一个音节开头之间进行线性插值&#10;                        startPixel + (endPixel - startPixel) * gapProgress&#10;                    } else {&#10;                        // 如果没有间隙，直接跳到下一个音节的开始位置&#10;                        endPixel&#10;                    }&#10;                } else {&#10;                    // 理论上不应发生，作为备用&#10;                    val lastFinishedSyllable = lineLayout.lastOrNull { currentTimeMs &gt;= it.syllable.end }&#10;                    lastFinishedSyllable?.let { it.position.x + it.size.width } ?: 0f&#10;                }&#10;            }&#10;        }&#10;        (currentPixelPosition / totalWidth).coerceIn(0f, 1f)&#10;    }&#10;&#10;    val fadeRange = run {&#10;// ...existing code...&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>